"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import logging
from pathlib import Path
from decouple import config
import firebase_admin
from firebase_admin import credentials

# Configure logging
logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default="django-insecure-*%%)uc!v428r3q#r_dbt$j&a0u(5@mnv4rju4gryzxsh&ee&k*")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=lambda v: [s.strip() for s in v.split(',')])


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third party apps
    "rest_framework",
    "corsheaders",
    "django_extensions",
    
    # Local apps
    "authentication",
    "users",
    "courses",
    "student",
    "settings",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Serve static files
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "authentication.middleware.FirebaseAuthenticationMiddleware",  # Custom Firebase auth
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "backend.debug_middleware.DebugMiddleware",  # Add debug middleware last
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# WhiteNoise configuration for serving static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'authentication.authentication.FirebaseAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

# CORS Configuration
CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', default=False, cast=bool)
CORS_ALLOW_CREDENTIALS = True

# CORS Allowed Origins for production
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React dev server
    "http://localhost:8080",  # Vite dev server
    "http://127.0.0.1:3000",
    "http://127.0.0.1:8080", 
    # Add your production frontend domains here when you deploy
    # "https://your-frontend-domain.com",
]

# CORS Allowed Origin Regexes for flexible domain matching
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://.*\.vercel\.app$",  # Vercel deployments
    r"^https://.*\.netlify\.app$", # Netlify deployments  
    r"^https://.*\.firebase\.app$", # Firebase hosting
    r"^https://.*\.web\.app$",     # Firebase hosting custom domains
]

# CSRF Configuration for Cloud Run
CSRF_TRUSTED_ORIGINS = [
    'https://esaaedu-backend-578103433472.us-central1.run.app',
    'https://*.us-central1.run.app',
]

# Allow CSRF cookies to be sent with requests
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = 'Lax'

# Session configuration for admin
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# Firebase Configuration
FIREBASE_PROJECT_ID = config('FIREBASE_PROJECT_ID', default='')

# Firebase credentials will be loaded from Google Secret Manager in production
# Fallback to environment variables for local development
FIREBASE_PRIVATE_KEY_ID = config('FIREBASE_PRIVATE_KEY_ID', default='')
FIREBASE_PRIVATE_KEY = config('FIREBASE_PRIVATE_KEY', default='')
FIREBASE_CLIENT_EMAIL = config('FIREBASE_CLIENT_EMAIL', default='')
FIREBASE_CLIENT_ID = config('FIREBASE_CLIENT_ID', default='')
FIREBASE_CLIENT_X509_CERT_URL = config('FIREBASE_CLIENT_X509_CERT_URL', default='')

# Initialize Firebase Admin SDKk
def initialize_firebase():
    """Initialize Firebase Admin SDK with Google Secret Manager or environment variables"""
    if not FIREBASE_PROJECT_ID:
        logger.warning("Firebase project ID not configured")
        return False
    
    try:
        # Try to get credentials from Google Secret Manager first (for production)
        if config('USE_SECRET_MANAGER', default=False, cast=bool):
            try:
                from .secret_manager import get_secret_manager_client
                # Use Google Cloud project ID for Secret Manager access, not Firebase project ID
                gcp_project_id = 'esaasolution'  # Hardcoded for now
                logger.info(f"Using GCP Project ID for Secret Manager: {gcp_project_id}")
                secret_client = get_secret_manager_client(gcp_project_id)
                if secret_client:
                    firebase_credentials = secret_client.get_firebase_credentials()
                    if firebase_credentials:
                        cred = credentials.Certificate(firebase_credentials)
                        firebase_admin.initialize_app(cred, {
                            'projectId': FIREBASE_PROJECT_ID,
                        })
                        logger.info(f"Firebase initialized with Secret Manager for project: {FIREBASE_PROJECT_ID}")
                        return True
                    else:
                        logger.warning("Failed to retrieve Firebase credentials from Secret Manager")
                else:
                    logger.warning("Failed to create Secret Manager client")
            except Exception as e:
                logger.error(f"Secret Manager error: {e}")
                logger.info("Falling back to environment variables...")
        
        # Fallback to environment variables (for local development)
        if all([FIREBASE_PRIVATE_KEY_ID, FIREBASE_PRIVATE_KEY, FIREBASE_CLIENT_EMAIL, FIREBASE_CLIENT_ID]):
            firebase_credentials = {
                "type": "service_account",
                "project_id": FIREBASE_PROJECT_ID,
                "private_key_id": FIREBASE_PRIVATE_KEY_ID,
                "private_key": FIREBASE_PRIVATE_KEY.replace('\\n', '\n'),  # Handle escaped newlines
                "client_email": FIREBASE_CLIENT_EMAIL,
                "client_id": FIREBASE_CLIENT_ID,
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                "client_x509_cert_url": FIREBASE_CLIENT_X509_CERT_URL,
                "universe_domain": "googleapis.com"
            }
            
            cred = credentials.Certificate(firebase_credentials)
            firebase_admin.initialize_app(cred, {
                'projectId': FIREBASE_PROJECT_ID,
            })
            logger.info(f"Firebase initialized with environment variables for project: {FIREBASE_PROJECT_ID}")
            return True
        else:
            # Try default credentials (for Google Cloud deployment)
            firebase_admin.initialize_app(options={
                'projectId': FIREBASE_PROJECT_ID,
            })
            logger.info(f"Firebase initialized with default credentials for project: {FIREBASE_PROJECT_ID}")
            return True
            
    except Exception as e:
        logger.error(f"Failed to initialize Firebase: {e}")
        return False

# Initialize Firebase on startup
try:
    initialize_firebase()
except Exception as e:
    logger.warning(f"Firebase initialization failed on startup: {e}")
    # Continue without Firebase - it will be initialized when needed

# Custom User Model
AUTH_USER_MODEL = 'users.User'

# Database Configuration
if config('DATABASE_URL', default=None):
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(config('DATABASE_URL'))
    }
else:
    # Use SQLite for development, PostgreSQL for production
    db_engine = config('DB_ENGINE', default='sqlite')
    print(f"🔍 DEBUG: Database engine: {db_engine}")
    
    if db_engine == 'postgresql':
        print("🔍 DEBUG: Using PostgreSQL database")
        db_name = config('DB_NAME', default='stbacedemy-backened')
        db_user = config('DB_USER', default='postgres')
        
        # Check if running on Cloud Run (GAE_ENV or Cloud Run specific env)
        is_cloud_run = config('GAE_ENV', default=None) is not None or config('K_SERVICE', default=None) is not None
        
        if is_cloud_run:
            # Use Unix socket for Cloud Run
            db_host = f"/cloudsql/esaasolution:us-central1:engrjoelivon"
            db_port = None
            print(f"🔍 DEBUG: Cloud Run detected - using Unix socket")
        else:
            # Use IP for local development
            db_host = config('DB_HOST', default='104.197.207.176')
            db_port = config('DB_PORT', default='5432')
            print(f"🔍 DEBUG: Local development - using IP connection")
        
        print(f"🔍 DEBUG: DB_NAME: {db_name}")
        print(f"🔍 DEBUG: DB_USER: {db_user}")
        print(f"🔍 DEBUG: DB_HOST: {db_host}")
        print(f"🔍 DEBUG: DB_PORT: {db_port}")
        
        database_config = {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': db_name,
            'USER': db_user,
            'PASSWORD': config('DB_PASSWORD', default=''),
            'HOST': db_host,
            'OPTIONS': {
                'sslmode': 'require',
            },
        }
        
        # Only add PORT if not using Unix socket
        if db_port:
            database_config['PORT'] = db_port
            
        DATABASES = {'default': database_config}
    else:
        # Default to SQLite for development
        print("🔍 DEBUG: Using SQLite database")
        print(f"🔍 DEBUG: Database path: {BASE_DIR / 'db.sqlite3'}")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
