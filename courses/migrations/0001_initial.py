# Generated by Django 4.2.23 on 2025-08-25 13:52

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Class",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the class (e.g., 'Morning Group A')",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Brief description of the class"
                    ),
                ),
                (
                    "max_capacity",
                    models.PositiveIntegerField(
                        default=10,
                        help_text="Maximum number of students allowed in this class",
                    ),
                ),
                (
                    "schedule",
                    models.CharField(
                        blank=True,
                        help_text="Class schedule (e.g., 'Mon/Wed 9:00 AM')",
                        max_length=200,
                    ),
                ),
                (
                    "meeting_link",
                    models.URLField(
                        blank=True, help_text="Online meeting link for virtual classes"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether the class is currently active"
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True, help_text="Class start date", null=True
                    ),
                ),
                (
                    "end_date",
                    models.DateField(blank=True, help_text="Class end date", null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Class",
                "verbose_name_plural": "Classes",
                "db_table": "classes",
                "ordering": ["course__title", "name"],
            },
        ),
        migrations.CreateModel(
            name="ClassEvent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(help_text="Event title", max_length=200)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Event description"),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("lesson", "Lesson"),
                            ("meeting", "Meeting"),
                            ("break", "Break"),
                        ],
                        default="lesson",
                        help_text="Type of event",
                        max_length=20,
                    ),
                ),
                ("start_time", models.DateTimeField(help_text="Event start time")),
                ("end_time", models.DateTimeField(help_text="Event end time")),
                (
                    "meeting_platform",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("google-meet", "Google Meet"),
                            ("zoom", "Zoom"),
                            ("other", "Other"),
                        ],
                        help_text="Platform for live class meetings",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "meeting_link",
                    models.URLField(
                        blank=True,
                        help_text="Meeting link for live classes (Google Meet, Zoom, etc.)",
                    ),
                ),
                (
                    "meeting_id",
                    models.CharField(
                        blank=True,
                        help_text="Meeting ID or room number",
                        max_length=100,
                    ),
                ),
                (
                    "meeting_password",
                    models.CharField(
                        blank=True,
                        help_text="Meeting password if required",
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "class_events",
                "ordering": ["start_time"],
            },
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(help_text="Course title", max_length=200)),
                ("description", models.TextField(help_text="Short course description")),
                (
                    "long_description",
                    models.TextField(help_text="Detailed course description"),
                ),
                (
                    "category",
                    models.CharField(help_text="Course category", max_length=100),
                ),
                (
                    "age_range",
                    models.CharField(
                        help_text="Target age range (e.g., 'Ages 6-10')", max_length=50
                    ),
                ),
                (
                    "duration",
                    models.CharField(
                        help_text="Course duration (e.g., '8 weeks')", max_length=50
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                        ],
                        default="beginner",
                        max_length=20,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Course price in USD",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "features",
                    models.JSONField(
                        default=list, help_text="List of course features/highlights"
                    ),
                ),
                (
                    "overview",
                    models.TextField(
                        blank=True,
                        help_text="Detailed course overview (extended description)",
                    ),
                ),
                (
                    "learning_objectives",
                    models.JSONField(
                        default=list, help_text="Detailed learning objectives"
                    ),
                ),
                (
                    "prerequisites_text",
                    models.TextField(
                        blank=True, help_text="Text description of prerequisites"
                    ),
                ),
                (
                    "duration_weeks",
                    models.PositiveIntegerField(
                        default=8, help_text="Course duration in weeks"
                    ),
                ),
                (
                    "sessions_per_week",
                    models.PositiveIntegerField(
                        default=2, help_text="Number of sessions per week"
                    ),
                ),
                (
                    "total_projects",
                    models.PositiveIntegerField(
                        default=5, help_text="Number of projects students will create"
                    ),
                ),
                (
                    "value_propositions",
                    models.JSONField(
                        default=list,
                        help_text="List of course benefits and value propositions",
                    ),
                ),
                (
                    "featured",
                    models.BooleanField(
                        default=False, help_text="Show on home page as featured course"
                    ),
                ),
                (
                    "popular",
                    models.BooleanField(
                        default=False, help_text="Mark as 'Most Popular' course"
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="bg-gradient-primary",
                        help_text="CSS class for course color/gradient",
                        max_length=100,
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        default="Code",
                        help_text="Lucide icon name for course",
                        max_length=50,
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Course cover image (optional)",
                        null=True,
                        upload_to="course_images/",
                    ),
                ),
                (
                    "max_students",
                    models.IntegerField(
                        default=8,
                        help_text="Maximum number of students per class",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "schedule",
                    models.CharField(
                        default="2 sessions per week",
                        help_text="Class schedule description",
                        max_length=100,
                    ),
                ),
                (
                    "certificate",
                    models.BooleanField(
                        default=True, help_text="Award certificate upon completion"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("published", "Published"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CourseEnrollment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("dropped", "Dropped"),
                            ("paused", "Paused"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("enrolled_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "last_accessed_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
            options={
                "ordering": ["-enrolled_at"],
            },
        ),
        migrations.CreateModel(
            name="CourseReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "student_name",
                    models.CharField(
                        help_text="Student's display name", max_length=100
                    ),
                ),
                (
                    "student_age",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Student's age when review was written",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(18),
                        ],
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        help_text="Rating from 1 to 5 stars",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("review_text", models.TextField(help_text="Review content")),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False, help_text="Admin verified this is a real review"
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False,
                        help_text="Show this review prominently on course details",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-is_featured", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "order",
                    models.IntegerField(help_text="Lesson sequence within the course"),
                ),
                (
                    "duration",
                    models.IntegerField(
                        help_text="Lesson duration in minutes",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("live_class", "Live Class"),
                            ("video_audio", "Video/Audio Lesson"),
                            ("text_lesson", "Text Lesson"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "text_content",
                    models.TextField(
                        blank=True,
                        help_text="Rich text content for text lessons",
                        null=True,
                    ),
                ),
                (
                    "video_url",
                    models.URLField(
                        blank=True,
                        help_text="Video URL for video/audio lessons",
                        null=True,
                    ),
                ),
                (
                    "audio_url",
                    models.URLField(
                        blank=True,
                        help_text="Audio URL for video/audio lessons",
                        null=True,
                    ),
                ),
                (
                    "live_class_date",
                    models.DateTimeField(
                        blank=True, help_text="Scheduled date for live class", null=True
                    ),
                ),
                (
                    "live_class_status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("ongoing", "Ongoing"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="scheduled",
                        help_text="Current status of live class",
                        max_length=20,
                    ),
                ),
                (
                    "content",
                    models.JSONField(
                        default=dict,
                        help_text="Additional type-specific lesson content and configuration",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["course", "order"],
            },
        ),
        migrations.CreateModel(
            name="LessonProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("locked", "Locked"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "time_spent",
                    models.IntegerField(default=0, help_text="Time spent in minutes"),
                ),
                (
                    "progress_data",
                    models.JSONField(
                        default=dict, help_text="Lesson-specific progress data"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(help_text="Note title", max_length=200)),
                ("content", models.TextField(help_text="Note content")),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("general", "General"),
                            ("lesson", "Lesson Specific"),
                            ("idea", "Idea"),
                            ("reminder", "Reminder"),
                            ("issue", "Issue"),
                        ],
                        default="general",
                        help_text="Note category",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-updated_at", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("question_text", models.TextField(help_text="The question text")),
                (
                    "order",
                    models.IntegerField(help_text="Question order within the quiz"),
                ),
                (
                    "points",
                    models.IntegerField(
                        default=1,
                        help_text="Points awarded for correct answer",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("multiple_choice", "Multiple Choice"),
                            ("true_false", "True/False"),
                            ("fill_blank", "Fill in the Blank"),
                            ("short_answer", "Short Answer"),
                            ("essay", "Essay"),
                            ("matching", "Matching"),
                            ("ordering", "Ordering/Ranking"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "content",
                    models.JSONField(
                        default=dict,
                        help_text="Question-specific content (options, answers, etc.)",
                    ),
                ),
                (
                    "explanation",
                    models.TextField(
                        blank=True, help_text="Explanation shown after answering"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["quiz", "order"],
            },
        ),
        migrations.CreateModel(
            name="Quiz",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "time_limit",
                    models.IntegerField(
                        blank=True,
                        help_text="Time limit in minutes (null = no limit)",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "passing_score",
                    models.IntegerField(
                        default=70,
                        help_text="Minimum percentage to pass",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "max_attempts",
                    models.IntegerField(
                        default=3,
                        help_text="Maximum number of attempts allowed",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "show_correct_answers",
                    models.BooleanField(
                        default=True, help_text="Show correct answers after completion"
                    ),
                ),
                (
                    "randomize_questions",
                    models.BooleanField(
                        default=False,
                        help_text="Randomize question order for each attempt",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["lesson__course", "lesson__order"],
            },
        ),
        migrations.CreateModel(
            name="QuizAttempt",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "attempt_number",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Score as percentage",
                        max_digits=5,
                        null=True,
                    ),
                ),
                ("points_earned", models.IntegerField(default=0)),
                ("passed", models.BooleanField(default=False)),
                (
                    "answers",
                    models.JSONField(
                        default=dict, help_text="Student answers for each question"
                    ),
                ),
                (
                    "enrollment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.courseenrollment",
                    ),
                ),
                (
                    "quiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attempts",
                        to="courses.quiz",
                    ),
                ),
            ],
            options={
                "ordering": ["-started_at"],
            },
        ),
    ]
