# Generated by Django 4.2.23 on 2025-08-20 18:23

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(help_text="Course title", max_length=200)),
                ("description", models.TextField(help_text="Short course description")),
                (
                    "long_description",
                    models.TextField(help_text="Detailed course description"),
                ),
                (
                    "category",
                    models.CharField(help_text="Course category", max_length=100),
                ),
                (
                    "age_range",
                    models.CharField(
                        help_text="Target age range (e.g., 'Ages 6-10')", max_length=50
                    ),
                ),
                (
                    "duration",
                    models.CharField(
                        help_text="Course duration (e.g., '8 weeks')", max_length=50
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                        ],
                        default="beginner",
                        max_length=20,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Course price in USD",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "features",
                    models.JSONField(
                        default=list, help_text="List of course features/highlights"
                    ),
                ),
                (
                    "featured",
                    models.BooleanField(
                        default=False, help_text="Show on home page as featured course"
                    ),
                ),
                (
                    "popular",
                    models.BooleanField(
                        default=False, help_text="Mark as 'Most Popular' course"
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="bg-gradient-primary",
                        help_text="CSS class for course color/gradient",
                        max_length=100,
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        default="Code",
                        help_text="Lucide icon name for course",
                        max_length=50,
                    ),
                ),
                (
                    "max_students",
                    models.IntegerField(
                        default=8,
                        help_text="Maximum number of students per class",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "schedule",
                    models.CharField(
                        default="2 sessions per week",
                        help_text="Class schedule description",
                        max_length=100,
                    ),
                ),
                (
                    "certificate",
                    models.BooleanField(
                        default=True, help_text="Award certificate upon completion"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("published", "Published"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "prerequisites",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Required courses before taking this course",
                        to="courses.course",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        limit_choices_to={"role": "teacher"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_courses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "order",
                    models.IntegerField(help_text="Lesson sequence within the course"),
                ),
                (
                    "duration",
                    models.IntegerField(
                        help_text="Lesson duration in minutes",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("live", "Live Class"),
                            ("recorded", "Recorded Video"),
                            ("material", "Reading Material"),
                            ("interactive", "Interactive Exercise"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "content",
                    models.JSONField(
                        default=dict,
                        help_text="Type-specific lesson content and configuration",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lessons",
                        to="courses.course",
                    ),
                ),
                (
                    "prerequisites",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Lessons that must be completed before this one",
                        to="courses.lesson",
                    ),
                ),
            ],
            options={
                "ordering": ["course", "order"],
            },
        ),
        migrations.CreateModel(
            name="Quiz",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "time_limit",
                    models.IntegerField(
                        blank=True,
                        help_text="Time limit in minutes (null = no limit)",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "passing_score",
                    models.IntegerField(
                        default=70,
                        help_text="Minimum percentage to pass",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "max_attempts",
                    models.IntegerField(
                        default=3,
                        help_text="Maximum number of attempts allowed",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "show_correct_answers",
                    models.BooleanField(
                        default=True, help_text="Show correct answers after completion"
                    ),
                ),
                (
                    "randomize_questions",
                    models.BooleanField(
                        default=False,
                        help_text="Randomize question order for each attempt",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "lesson",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quiz",
                        to="courses.lesson",
                    ),
                ),
            ],
            options={
                "ordering": ["lesson__course", "lesson__order"],
            },
        ),
        migrations.CreateModel(
            name="CourseEnrollment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("dropped", "Dropped"),
                            ("paused", "Paused"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("enrolled_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "last_accessed_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to="courses.course",
                    ),
                ),
                (
                    "current_lesson",
                    models.ForeignKey(
                        blank=True,
                        help_text="Current lesson the student is on",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="courses.lesson",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        limit_choices_to={"role": "student"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_enrollments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-enrolled_at"],
            },
        ),
        migrations.CreateModel(
            name="QuizAttempt",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "attempt_number",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Score as percentage",
                        max_digits=5,
                        null=True,
                    ),
                ),
                ("points_earned", models.IntegerField(default=0)),
                ("passed", models.BooleanField(default=False)),
                (
                    "answers",
                    models.JSONField(
                        default=dict, help_text="Student answers for each question"
                    ),
                ),
                (
                    "enrollment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.courseenrollment",
                    ),
                ),
                (
                    "quiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attempts",
                        to="courses.quiz",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quiz_attempts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-started_at"],
                "indexes": [
                    models.Index(
                        fields=["student", "quiz"],
                        name="courses_qui_student_76b4a8_idx",
                    ),
                    models.Index(
                        fields=["enrollment", "completed_at"],
                        name="courses_qui_enrollm_9f4292_idx",
                    ),
                ],
                "unique_together": {("student", "quiz", "attempt_number")},
            },
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("question_text", models.TextField(help_text="The question text")),
                (
                    "order",
                    models.IntegerField(help_text="Question order within the quiz"),
                ),
                (
                    "points",
                    models.IntegerField(
                        default=1,
                        help_text="Points awarded for correct answer",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("multiple_choice", "Multiple Choice"),
                            ("true_false", "True/False"),
                            ("fill_blank", "Fill in the Blank"),
                            ("short_answer", "Short Answer"),
                            ("essay", "Essay"),
                            ("matching", "Matching"),
                            ("ordering", "Ordering/Ranking"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "content",
                    models.JSONField(
                        default=dict,
                        help_text="Question-specific content (options, answers, etc.)",
                    ),
                ),
                (
                    "explanation",
                    models.TextField(
                        blank=True, help_text="Explanation shown after answering"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "quiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="courses.quiz",
                    ),
                ),
            ],
            options={
                "ordering": ["quiz", "order"],
                "indexes": [
                    models.Index(
                        fields=["quiz", "order"], name="courses_que_quiz_id_d60549_idx"
                    ),
                    models.Index(fields=["type"], name="courses_que_type_db2fd3_idx"),
                ],
                "unique_together": {("quiz", "order")},
            },
        ),
        migrations.CreateModel(
            name="LessonProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("locked", "Locked"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "time_spent",
                    models.IntegerField(default=0, help_text="Time spent in minutes"),
                ),
                (
                    "progress_data",
                    models.JSONField(
                        default=dict, help_text="Lesson-specific progress data"
                    ),
                ),
                (
                    "enrollment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_progress",
                        to="courses.courseenrollment",
                    ),
                ),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="courses.lesson"
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["enrollment", "status"],
                        name="courses_les_enrollm_4c2337_idx",
                    ),
                    models.Index(
                        fields=["lesson", "status"],
                        name="courses_les_lesson__30e92d_idx",
                    ),
                ],
                "unique_together": {("enrollment", "lesson")},
            },
        ),
        migrations.AddIndex(
            model_name="lesson",
            index=models.Index(
                fields=["course", "order"], name="courses_les_course__dc0bc6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="lesson",
            index=models.Index(fields=["type"], name="courses_les_type_805272_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="lesson",
            unique_together={("course", "order")},
        ),
        migrations.AddIndex(
            model_name="courseenrollment",
            index=models.Index(
                fields=["student", "status"], name="courses_cou_student_5a794f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="courseenrollment",
            index=models.Index(
                fields=["course", "status"], name="courses_cou_course__4e6f05_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="courseenrollment",
            unique_together={("student", "course")},
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(
                fields=["status", "featured"], name="courses_cou_status_c6495b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(
                fields=["teacher", "status"], name="courses_cou_teacher_cff768_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(
                fields=["category"], name="courses_cou_categor_fec4a4_idx"
            ),
        ),
    ]
