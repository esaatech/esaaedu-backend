# Generated by Django 4.2.24 on 2025-09-23 05:09

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("student", "0009_teacherassessment_viewed_at"),
        ("courses", "0017_project_projectsubmission"),
    ]

    operations = [
        migrations.CreateModel(
            name="Assignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "due_date",
                    models.DateTimeField(
                        blank=True, help_text="Assignment due date", null=True
                    ),
                ),
                (
                    "passing_score",
                    models.IntegerField(
                        default=70,
                        help_text="Minimum percentage to pass",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "max_attempts",
                    models.IntegerField(
                        default=1,
                        help_text="Maximum number of attempts allowed",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "show_correct_answers",
                    models.BooleanField(
                        default=False, help_text="Show correct answers after completion"
                    ),
                ),
                (
                    "randomize_questions",
                    models.BooleanField(
                        default=False,
                        help_text="Randomize question order for each attempt",
                    ),
                ),
                (
                    "assignment_type",
                    models.CharField(
                        choices=[
                            ("homework", "Homework"),
                            ("project", "Project"),
                            ("exam", "Exam"),
                            ("quiz", "Quiz-style Assignment"),
                            ("essay", "Essay Assignment"),
                            ("practical", "Practical Assignment"),
                        ],
                        default="homework",
                        help_text="Type of assignment",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "lesson",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignment",
                        to="courses.lesson",
                    ),
                ),
            ],
            options={
                "ordering": ["lesson__course", "lesson__order"],
            },
        ),
        migrations.AlterField(
            model_name="question",
            name="type",
            field=models.CharField(
                choices=[
                    ("multiple_choice", "Multiple Choice"),
                    ("true_false", "True/False"),
                    ("fill_blank", "Fill in the Blank"),
                    ("short_answer", "Short Answer"),
                    ("essay", "Essay"),
                    ("matching", "Matching"),
                    ("ordering", "Ordering/Ranking"),
                    ("flashcard", "Flashcard"),
                ],
                max_length=20,
            ),
        ),
        migrations.CreateModel(
            name="AssignmentSubmission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "attempt_number",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "answers",
                    models.JSONField(
                        default=dict, help_text="Student answers for each question"
                    ),
                ),
                (
                    "is_graded",
                    models.BooleanField(
                        default=False, help_text="Has teacher graded this submission?"
                    ),
                ),
                ("graded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "points_earned",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Points earned by student",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "points_possible",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Total points possible",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage score",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "passed",
                    models.BooleanField(
                        default=False, help_text="Did student pass the assignment?"
                    ),
                ),
                (
                    "instructor_feedback",
                    models.TextField(
                        blank=True, help_text="Teacher's feedback on the submission"
                    ),
                ),
                (
                    "feedback_checked",
                    models.BooleanField(
                        default=False, help_text="Has student seen the feedback?"
                    ),
                ),
                (
                    "feedback_checked_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When student last checked feedback",
                        null=True,
                    ),
                ),
                (
                    "feedback_response",
                    models.TextField(
                        blank=True, help_text="Student's response to teacher feedback"
                    ),
                ),
                (
                    "graded_questions",
                    models.JSONField(
                        default=list,
                        help_text="Individual question grades and feedback - list of {question_id, is_correct, teacher_feedback, points_earned, points_possible}",
                    ),
                ),
                (
                    "grading_history",
                    models.JSONField(
                        default=list, help_text="Audit trail of grading changes"
                    ),
                ),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="courses.assignment",
                    ),
                ),
                (
                    "enrollment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="student.enrolledcourse",
                    ),
                ),
                (
                    "graded_by",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"role": "teacher"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="graded_assignments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignment_submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-submitted_at"],
                "indexes": [
                    models.Index(
                        fields=["student", "assignment"],
                        name="courses_ass_student_c0531a_idx",
                    ),
                    models.Index(
                        fields=["enrollment", "submitted_at"],
                        name="courses_ass_enrollm_3e0a36_idx",
                    ),
                    models.Index(
                        fields=["is_graded"], name="courses_ass_is_grad_a823e9_idx"
                    ),
                    models.Index(
                        fields=["feedback_checked"],
                        name="courses_ass_feedbac_d7103a_idx",
                    ),
                ],
                "unique_together": {("student", "assignment", "attempt_number")},
            },
        ),
        migrations.CreateModel(
            name="AssignmentQuestion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("question_text", models.TextField(help_text="The question text")),
                (
                    "order",
                    models.IntegerField(
                        help_text="Question order within the assignment"
                    ),
                ),
                (
                    "points",
                    models.IntegerField(
                        default=1,
                        help_text="Points awarded for correct answer",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("multiple_choice", "Multiple Choice"),
                            ("true_false", "True/False"),
                            ("fill_blank", "Fill in the Blank"),
                            ("short_answer", "Short Answer"),
                            ("essay", "Essay"),
                            ("matching", "Matching"),
                            ("ordering", "Ordering/Ranking"),
                            ("flashcard", "Flashcard"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "content",
                    models.JSONField(
                        default=dict,
                        help_text="Question-specific content (options, answers, etc.)",
                    ),
                ),
                (
                    "explanation",
                    models.TextField(
                        blank=True, help_text="Explanation shown after answering"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="courses.assignment",
                    ),
                ),
            ],
            options={
                "ordering": ["assignment", "order"],
                "indexes": [
                    models.Index(
                        fields=["assignment", "order"],
                        name="courses_ass_assignm_9034a7_idx",
                    ),
                    models.Index(fields=["type"], name="courses_ass_type_eae658_idx"),
                ],
                "unique_together": {("assignment", "order")},
            },
        ),
        migrations.AddIndex(
            model_name="assignment",
            index=models.Index(
                fields=["assignment_type"], name="courses_ass_assignm_8b6828_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="assignment",
            index=models.Index(
                fields=["due_date"], name="courses_ass_due_dat_e405cf_idx"
            ),
        ),
    ]
