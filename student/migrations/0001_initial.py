# Generated by Django 4.2.23 on 2025-08-25 13:52

import datetime
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="EnrolledCourse",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("enrollment_date", models.DateField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("dropped", "Dropped"),
                            ("paused", "Paused"),
                            ("pending", "Pending Approval"),
                            ("suspended", "Suspended"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "progress_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Overall course completion percentage",
                        max_digits=5,
                    ),
                ),
                ("completed_lessons_count", models.PositiveIntegerField(default=0)),
                ("total_lessons_count", models.PositiveIntegerField(default=0)),
                (
                    "overall_grade",
                    models.CharField(
                        blank=True,
                        help_text="Overall letter grade (A+, B, C, etc.)",
                        max_length=2,
                    ),
                ),
                (
                    "gpa_points",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="GPA points for this course",
                        max_digits=3,
                        null=True,
                    ),
                ),
                (
                    "average_quiz_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("total_assignments_completed", models.PositiveIntegerField(default=0)),
                ("total_assignments_assigned", models.PositiveIntegerField(default=0)),
                (
                    "total_study_time",
                    models.DurationField(
                        default=datetime.timedelta,
                        help_text="Total time spent studying this course",
                    ),
                ),
                (
                    "last_accessed",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time student accessed the course",
                        null=True,
                    ),
                ),
                (
                    "login_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times student logged into this course",
                    ),
                ),
                (
                    "total_video_watch_time",
                    models.DurationField(
                        default=datetime.timedelta,
                        help_text="Total video content watched",
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("paid", "Paid"),
                            ("pending", "Pending"),
                            ("overdue", "Overdue"),
                            ("scholarship", "Scholarship"),
                            ("free", "Free"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "amount_paid",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Amount paid for this course",
                        max_digits=10,
                    ),
                ),
                ("payment_due_date", models.DateField(blank=True, null=True)),
                (
                    "discount_applied",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Discount percentage applied",
                        max_digits=5,
                    ),
                ),
                (
                    "completion_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when course was completed",
                        null=True,
                    ),
                ),
                (
                    "certificate_issued",
                    models.BooleanField(
                        default=False,
                        help_text="Whether completion certificate was issued",
                    ),
                ),
                (
                    "certificate_url",
                    models.URLField(
                        blank=True, help_text="URL to download the certificate"
                    ),
                ),
                ("final_grade_issued", models.BooleanField(default=False)),
                (
                    "parent_notifications_enabled",
                    models.BooleanField(
                        default=True, help_text="Send progress notifications to parents"
                    ),
                ),
                (
                    "reminder_emails_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Send reminder emails for assignments/classes",
                    ),
                ),
                (
                    "special_accommodations",
                    models.TextField(
                        blank=True,
                        help_text="Special learning accommodations for this student",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_progress_update", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "enrolled_courses",
                "ordering": ["-enrollment_date"],
            },
        ),
        migrations.CreateModel(
            name="StudentAttendance",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date", models.DateField(default=django.utils.timezone.now)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("present", "Present"),
                            ("absent", "Absent"),
                            ("late", "Late"),
                            ("excused", "Excused"),
                        ],
                        default="present",
                        max_length=20,
                    ),
                ),
                ("check_in_time", models.TimeField(blank=True, null=True)),
                ("check_out_time", models.TimeField(blank=True, null=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about attendance"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "student_attendance",
                "ordering": ["-date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentBehavior",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "behavior_type",
                    models.CharField(
                        choices=[
                            ("positive", "Positive"),
                            ("negative", "Negative"),
                            ("neutral", "Neutral"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("participation", "Class Participation"),
                            ("homework", "Homework Completion"),
                            ("respect", "Respectful Behavior"),
                            ("helping", "Helping Others"),
                            ("leadership", "Leadership"),
                            ("creativity", "Creativity"),
                            ("disruption", "Class Disruption"),
                            ("tardiness", "Tardiness"),
                            ("incomplete_work", "Incomplete Work"),
                            ("disrespect", "Disrespectful Behavior"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "severity",
                    models.IntegerField(
                        choices=[(1, "Minor"), (2, "Moderate"), (3, "Major")],
                        default=1,
                        help_text="1=Minor, 2=Moderate, 3=Major",
                    ),
                ),
                (
                    "action_taken",
                    models.TextField(blank=True, help_text="What action was taken"),
                ),
                ("parent_contacted", models.BooleanField(default=False)),
                ("parent_contact_date", models.DateTimeField(blank=True, null=True)),
                ("follow_up_required", models.BooleanField(default=False)),
                ("follow_up_date", models.DateField(blank=True, null=True)),
                ("incident_date", models.DateField(default=django.utils.timezone.now)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "student_behavior",
                "ordering": ["-incident_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentCommunication",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "communication_type",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("phone", "Phone Call"),
                            ("meeting", "In-Person Meeting"),
                            ("message", "Platform Message"),
                            ("letter", "Written Letter"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "purpose",
                    models.CharField(
                        choices=[
                            ("progress_update", "Progress Update"),
                            ("behavior_concern", "Behavior Concern"),
                            ("academic_concern", "Academic Concern"),
                            ("positive_feedback", "Positive Feedback"),
                            ("schedule_change", "Schedule Change"),
                            ("general_inquiry", "General Inquiry"),
                            ("parent_request", "Parent Request"),
                        ],
                        max_length=20,
                    ),
                ),
                ("subject", models.CharField(max_length=200)),
                ("message", models.TextField()),
                ("contacted_student", models.BooleanField(default=False)),
                ("contacted_parent", models.BooleanField(default=False)),
                ("parent_email", models.EmailField(blank=True, max_length=254)),
                ("parent_phone", models.CharField(blank=True, max_length=20)),
                ("response_received", models.BooleanField(default=False)),
                ("response_date", models.DateTimeField(blank=True, null=True)),
                ("response_content", models.TextField(blank=True)),
                ("follow_up_required", models.BooleanField(default=False)),
                ("follow_up_date", models.DateField(blank=True, null=True)),
                ("follow_up_completed", models.BooleanField(default=False)),
                ("sent_date", models.DateTimeField(default=django.utils.timezone.now)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "student_communications",
                "ordering": ["-sent_date"],
            },
        ),
        migrations.CreateModel(
            name="StudentGrade",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "grade_type",
                    models.CharField(
                        choices=[
                            ("quiz", "Quiz"),
                            ("assignment", "Assignment"),
                            ("project", "Project"),
                            ("exam", "Exam"),
                            ("participation", "Participation"),
                            ("homework", "Homework"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the assessment", max_length=200
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("points_earned", models.DecimalField(decimal_places=2, max_digits=6)),
                (
                    "points_possible",
                    models.DecimalField(decimal_places=2, max_digits=6),
                ),
                (
                    "percentage",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Calculated percentage",
                        max_digits=5,
                    ),
                ),
                (
                    "letter_grade",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A+", "A+ (97-100)"),
                            ("A", "A (93-96)"),
                            ("A-", "A- (90-92)"),
                            ("B+", "B+ (87-89)"),
                            ("B", "B (83-86)"),
                            ("B-", "B- (80-82)"),
                            ("C+", "C+ (77-79)"),
                            ("C", "C (73-76)"),
                            ("C-", "C- (70-72)"),
                            ("D+", "D+ (67-69)"),
                            ("D", "D (63-66)"),
                            ("D-", "D- (60-62)"),
                            ("F", "F (0-59)"),
                        ],
                        max_length=2,
                    ),
                ),
                ("teacher_comments", models.TextField(blank=True)),
                (
                    "private_notes",
                    models.TextField(
                        blank=True, help_text="Private notes for teacher only"
                    ),
                ),
                (
                    "graded_questions",
                    models.JSONField(
                        default=list,
                        help_text="Individual question grades and feedback - list of {question_id, is_correct, teacher_feedback, points_earned, points_possible}",
                    ),
                ),
                ("assigned_date", models.DateField()),
                ("due_date", models.DateField(blank=True, null=True)),
                ("submitted_date", models.DateTimeField(blank=True, null=True)),
                ("graded_date", models.DateTimeField(auto_now_add=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "student_grades",
                "ordering": ["-graded_date"],
            },
        ),
        migrations.CreateModel(
            name="StudentNote",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("academic", "Academic"),
                            ("behavioral", "Behavioral"),
                            ("personal", "Personal"),
                            ("parent_communication", "Parent Communication"),
                            ("medical", "Medical/Health"),
                            ("general", "General"),
                        ],
                        default="general",
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "is_private",
                    models.BooleanField(
                        default=True, help_text="Private notes only visible to teacher"
                    ),
                ),
                (
                    "is_important",
                    models.BooleanField(
                        default=False, help_text="Mark as important for quick reference"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "student_notes",
                "ordering": ["-updated_at"],
            },
        ),
    ]
