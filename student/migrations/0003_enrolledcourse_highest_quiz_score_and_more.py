# Generated by Django 4.2.23 on 2025-08-29 20:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    dependencies = [
        ("courses", "0009_fix_started_at_auto_now_add"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("student", "0002_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="enrolledcourse",
            name="highest_quiz_score",
            field=models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
        ),
        migrations.AddField(
            model_name="enrolledcourse",
            name="last_assessment_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="enrolledcourse",
            name="lesson_assessments_count",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="enrolledcourse",
            name="lowest_quiz_score",
            field=models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
        ),
        migrations.AddField(
            model_name="enrolledcourse",
            name="teacher_assessments_count",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="enrolledcourse",
            name="total_quizzes_passed",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="enrolledcourse",
            name="total_quizzes_taken",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.CreateModel(
            name="TeacherAssessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "academic_performance",
                    models.CharField(
                        choices=[
                            ("excellent", "Excellent"),
                            ("good", "Good"),
                            ("satisfactory", "Satisfactory"),
                            ("needs_improvement", "Needs Improvement"),
                            ("poor", "Poor"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "participation_level",
                    models.CharField(
                        choices=[
                            ("very_active", "Very Active"),
                            ("active", "Active"),
                            ("moderate", "Moderate"),
                            ("passive", "Passive"),
                            ("inactive", "Inactive"),
                        ],
                        max_length=20,
                    ),
                ),
                ("strengths", models.TextField(blank=True)),
                ("weaknesses", models.TextField(blank=True)),
                ("recommendations", models.TextField(blank=True)),
                ("general_comments", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "enrollment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_assessments",
                        to="student.enrolledcourse",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_assessments_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "teacher_assessments",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["enrollment", "teacher"],
                        name="teacher_ass_enrollm_6701ae_idx",
                    ),
                    models.Index(
                        fields=["teacher", "-created_at"],
                        name="teacher_ass_teacher_b0807d_idx",
                    ),
                    models.Index(
                        fields=["academic_performance"],
                        name="teacher_ass_academi_973cf8_idx",
                    ),
                ],
                "unique_together": {("enrollment", "teacher")},
            },
        ),
        migrations.CreateModel(
            name="LessonAssessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "assessment_type",
                    models.CharField(
                        choices=[
                            ("strength", "Strength"),
                            ("weakness", "Weakness"),
                            ("improvement", "Improvement Area"),
                            ("general", "General Note"),
                            ("achievement", "Achievement"),
                            ("challenge", "Challenge Faced"),
                        ],
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "enrollment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_assessments",
                        to="student.enrolledcourse",
                    ),
                ),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_assessments",
                        to="courses.lesson",
                    ),
                ),
                (
                    "quiz_attempt",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="courses.quizattempt",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_assessments_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "lesson_assessments",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["enrollment", "lesson"],
                        name="lesson_asse_enrollm_54bd2d_idx",
                    ),
                    models.Index(
                        fields=["teacher", "-created_at"],
                        name="lesson_asse_teacher_a26cc8_idx",
                    ),
                    models.Index(
                        fields=["assessment_type"],
                        name="lesson_asse_assessm_605ee7_idx",
                    ),
                ],
                "unique_together": {("enrollment", "lesson", "teacher")},
            },
        ),
    ]
