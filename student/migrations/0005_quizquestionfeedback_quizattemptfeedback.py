# Generated by Django 4.2.23 on 2025-08-30 14:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    dependencies = [
        ("courses", "0009_fix_started_at_auto_now_add"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("student", "0004_remove_teacher_assessment_unique_constraint"),
    ]

    operations = [
        migrations.CreateModel(
            name="QuizQuestionFeedback",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "feedback_text",
                    models.TextField(help_text="The actual feedback content"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "points_earned",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Points earned for this specific question",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "points_possible",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Total points possible for this question",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "is_correct",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether the student's answer was correct",
                        null=True,
                    ),
                ),
                (
                    "question_text_snapshot",
                    models.TextField(
                        blank=True,
                        help_text="Snapshot of question text when feedback was given",
                    ),
                ),
                (
                    "student_answer_snapshot",
                    models.TextField(
                        blank=True,
                        help_text="Snapshot of student's answer when feedback was given",
                    ),
                ),
                (
                    "correct_answer_snapshot",
                    models.TextField(
                        blank=True,
                        help_text="Snapshot of correct answer when feedback was given",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedbacks",
                        to="courses.question",
                    ),
                ),
                (
                    "quiz_attempt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_feedbacks",
                        to="courses.quizattempt",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_feedbacks_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "quiz_question_feedbacks",
                "indexes": [
                    models.Index(
                        fields=["quiz_attempt", "question"],
                        name="quiz_questi_quiz_at_586354_idx",
                    ),
                    models.Index(
                        fields=["teacher", "-created_at"],
                        name="quiz_questi_teacher_04201a_idx",
                    ),
                    models.Index(
                        fields=["is_correct"], name="quiz_questi_is_corr_117a6e_idx"
                    ),
                ],
                "unique_together": {("quiz_attempt", "question", "teacher")},
            },
        ),
        migrations.CreateModel(
            name="QuizAttemptFeedback",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "feedback_text",
                    models.TextField(help_text="The actual feedback content"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "overall_rating",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("excellent", "Excellent"),
                            ("good", "Good"),
                            ("satisfactory", "Satisfactory"),
                            ("needs_improvement", "Needs Improvement"),
                            ("poor", "Poor"),
                        ],
                        help_text="Overall rating of the quiz attempt",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "strengths_highlighted",
                    models.TextField(
                        blank=True,
                        help_text="Student strengths demonstrated in this quiz",
                    ),
                ),
                (
                    "areas_for_improvement",
                    models.TextField(
                        blank=True,
                        help_text="Specific areas where the student can improve",
                    ),
                ),
                (
                    "study_recommendations",
                    models.TextField(
                        blank=True,
                        help_text="Recommended study strategies or resources",
                    ),
                ),
                (
                    "private_notes",
                    models.TextField(
                        blank=True,
                        help_text="Private notes for teachers (not visible to students)",
                    ),
                ),
                (
                    "quiz_attempt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attempt_feedbacks",
                        to="courses.quizattempt",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_feedbacks_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "quiz_attempt_feedbacks",
                "indexes": [
                    models.Index(
                        fields=["quiz_attempt"], name="quiz_attemp_quiz_at_11e159_idx"
                    ),
                    models.Index(
                        fields=["teacher", "-created_at"],
                        name="quiz_attemp_teacher_946d46_idx",
                    ),
                    models.Index(
                        fields=["overall_rating"], name="quiz_attemp_overall_72a731_idx"
                    ),
                ],
                "unique_together": {("quiz_attempt", "teacher")},
            },
        ),
    ]
