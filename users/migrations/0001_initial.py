# Generated by Django 4.2.23 on 2025-08-20 11:56

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("firebase_uid", models.CharField(max_length=255, unique=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("student", "Student"),
                            ("teacher", "Teacher"),
                            ("admin", "Admin"),
                        ],
                        default="student",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_login_at", models.DateTimeField(blank=True, null=True)),
                ("username", models.CharField(blank=True, max_length=150)),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="TeacherProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bio", models.TextField(blank=True, help_text="Teacher's biography")),
                (
                    "qualifications",
                    models.TextField(
                        blank=True,
                        help_text="Educational qualifications and certifications",
                    ),
                ),
                (
                    "department",
                    models.CharField(
                        blank=True,
                        help_text="Department or subject area",
                        max_length=100,
                    ),
                ),
                (
                    "profile_image",
                    models.URLField(blank=True, help_text="URL to profile image"),
                ),
                ("phone_number", models.CharField(blank=True, max_length=20)),
                (
                    "specializations",
                    models.JSONField(
                        default=list, help_text="List of subject specializations"
                    ),
                ),
                (
                    "years_of_experience",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("linkedin_url", models.URLField(blank=True)),
                ("twitter_url", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "teacher_profiles",
            },
        ),
        migrations.CreateModel(
            name="StudentProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "grade_level",
                    models.CharField(
                        blank=True, help_text="Current grade level", max_length=20
                    ),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "profile_image",
                    models.URLField(blank=True, help_text="URL to profile image"),
                ),
                (
                    "parent_email",
                    models.EmailField(
                        blank=True, help_text="Parent/Guardian email", max_length=254
                    ),
                ),
                ("parent_name", models.CharField(blank=True, max_length=100)),
                ("parent_phone", models.CharField(blank=True, max_length=20)),
                ("emergency_contact", models.CharField(blank=True, max_length=255)),
                (
                    "learning_goals",
                    models.TextField(blank=True, help_text="Student's learning goals"),
                ),
                (
                    "interests",
                    models.JSONField(
                        default=list, help_text="List of interests and hobbies"
                    ),
                ),
                ("notifications_enabled", models.BooleanField(default=True)),
                ("email_notifications", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "student_profiles",
            },
        ),
    ]
